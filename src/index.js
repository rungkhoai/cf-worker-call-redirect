// File: src/index.js
export default {
  async fetch(request, env, ctx) {
    const KV = env.SALES_PHONES;
    const SHEET_CSV_URL = env.CSV_SALES_PHONE;
    const STATUS = [];

    try {
      STATUS.push("üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω request...");

      // --- L·∫•y KV ---
      const [cachedPhonesStr, cachedTSStr] = await Promise.all([
        KV.get("phones"),
        KV.get("phones_ts"),
      ]);
      let phones = cachedPhonesStr ? JSON.parse(cachedPhonesStr) : [];
      const ts = cachedTSStr ? parseInt(cachedTSStr) : 0;
      const now = Date.now();

      STATUS.push(`üîπ S·ªë ƒëi·ªán tho·∫°i trong KV: ${phones.length}`);
      STATUS.push(`üîπ Timestamp cache: ${ts || "ch∆∞a c√≥"}`);

      // --- H√†m fetch CSV ---
      const fetchAndCache = async () => {
        try {
          STATUS.push("üì° Fetch CSV t·ª´ Google Sheet...");
          const res = await fetch(SHEET_CSV_URL);
          if (!res.ok) throw new Error("‚ùå Kh√¥ng fetch ƒë∆∞·ª£c CSV");
          const csvText = await res.text();

          const lines = csvText.split("\n").slice(1);
          const newPhones = lines
            .map((line) => line.split(",")[1]?.trim().replace(/[.\s]/g, ""))
            .filter(Boolean);

          await Promise.all([
            KV.put("phones", JSON.stringify(newPhones)),
            KV.put("phones_ts", Date.now().toString()),
          ]);

          STATUS.push(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${newPhones.length} s·ªë v√†o KV`);
        } catch (e) {
          STATUS.push(`‚ùå L·ªói fetch CSV: ${e.message}`);
        }
      };

      // --- Ch·ªçn s·ªë hi·ªÉn th·ªã ngay ---
      let randomPhone = "‚ùå Kh√¥ng c√≥ s·ªë trong KV";
      if (phones.length) {
        randomPhone = phones[Math.floor(Math.random() * phones.length)];
        STATUS.push(`‚òéÔ∏è S·ªë ƒëi·ªán tho·∫°i ƒë∆∞·ª£c ch·ªçn: ${randomPhone}`);

        // fetch background n·∫øu g·∫ßn h·∫øt h·∫°n (>3h55)
        const FOUR_HOURS = 4 * 60 * 60 * 1000;
        if (!ts || now - ts >= FOUR_HOURS - 5 * 60 * 1000) {
          STATUS.push(
            "‚è≥ Cache g·∫ßn h·∫øt h·∫°n/ƒë√£ qu√° h·∫°n, fetch CSV background..."
          );
          ctx.waitUntil(fetchAndCache());
        }
      } else {
        // cache tr·ªëng, b·∫Øt bu·ªôc fetch
        STATUS.push("‚ö†Ô∏è Cache tr·ªëng, fetch CSV tr·ª±c ti·∫øp...");
        phones = await fetchAndCache();
        if (phones.length)
          randomPhone = phones[Math.floor(Math.random() * phones.length)];
      }

      // --- Tr·∫£ v·ªÅ HTML ---
      return new Response(
        `<html>
          <head><meta charset="UTF-8"><title>S·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n</title></head>
          <body>
            <h1>S·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n</h1>
            <p>${randomPhone}</p>
            <a href="tel:${randomPhone}"><button>Nh·∫•n ƒë·ªÉ g·ªçi</button></a>
            <h2>DEBUG</h2>
            <pre>${STATUS.join("\n")}</pre>
          </body>
        </html>`,
        { headers: { "Content-Type": "text/html; charset=UTF-8" } }
      );
    } catch (e) {
      return new Response(
        `<html><head><meta charset="UTF-8"></head>
        <body>
          <h1>‚ùå L·ªói Worker:</h1>
          <pre>${e.message}</pre>
        </body></html>`,
        { status: 500, headers: { "Content-Type": "text/html; charset=UTF-8" } }
      );
    }
  },

  // --- Cron job m·ªói 6h ---
  async scheduled(event, env, ctx) {
    const KV = env.SALES_PHONES;
    const SHEET_CSV_URL = env.CSV_SALES_PHONE;

    try {
      console.log("‚è∞ Cron job b·∫Øt ƒë·∫ßu fetch CSV...");
      const res = await fetch(SHEET_CSV_URL);
      if (!res.ok) throw new Error("‚ùå Kh√¥ng fetch ƒë∆∞·ª£c CSV");
      const csvText = await res.text();

      const lines = csvText.split("\n").slice(1);
      const phones = lines
        .map((l) => l.split(",")[1]?.trim().replace(/[.\s]/g, ""))
        .filter(Boolean);

      await Promise.all([
        KV.put("phones", JSON.stringify(phones)),
        KV.put("phones_ts", Date.now().toString()),
      ]);

      console.log(`‚úÖ Cron job c·∫≠p nh·∫≠t ${phones.length} s·ªë v√†o KV`);
    } catch (e) {
      console.error("‚ùå Cron job l·ªói:", e.message);
    }
  },
};
